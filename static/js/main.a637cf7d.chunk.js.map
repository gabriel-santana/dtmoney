{"version":3,"sources":["services/api.ts","hooks/useTransactions.tsx","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionTable/styles.ts","components/TransactionTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAEaA,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,kD,OCsBLC,EAAsBC,wBAC1B,IAGK,SAASC,EAAT,GAAuE,IAAvCC,EAAsC,EAAtCA,SAAsC,EACnCC,mBAAwB,IADW,mBACpEC,EADoE,KACtDC,EADsD,iDAQzE,WAAiCC,GAAjC,iBAAAC,EAAA,sEACyBZ,EAAIa,KAAK,gBAAT,2BAA8BF,GAA9B,IAAgDG,UAAW,IAAIC,QADxF,OACQC,EADR,OAEUC,EAAiBD,EAASE,KAA1BD,YAERP,EAAgB,GAAD,mBAAKD,GAAL,CAAmBQ,KAJpC,4CARyE,sBAezE,OAZAE,qBAAU,WACRnB,EAAIoB,IAAI,gBACPC,MAAK,SAAAL,GAAQ,OAAIN,EAAgBM,EAASE,KAAKT,mBAC/C,IAUD,cAACL,EAAoBkB,SAArB,CAA8BC,MAAO,CAACd,eAAce,kBAhBmB,6CAgBvE,SACGjB,IAKF,SAASkB,IAGd,OAFgBC,qBAAWtB,GCpDd,I,IAAA,MAA0B,mCCA1B,MAA0B,oCCA1B,MAA0B,kC,cCG5BuB,EAAYC,IAAOC,IAAV,imBCMf,SAASC,IAAW,IAGnBC,EAFmBN,IAAjBhB,aAEqBuB,QAAO,SAACC,EAAKhB,GASxC,MARwB,YAArBA,EAAYiB,MACbD,EAAIE,UAAYlB,EAAYmB,OAC5BH,EAAII,OAASpB,EAAYmB,SAEzBH,EAAIK,WAAarB,EAAYmB,OAC7BH,EAAII,OAASpB,EAAYmB,QAGpBH,IACN,CACDE,SAAU,EACVG,UAAW,EACXD,MAAO,IAGT,OACE,eAACV,EAAD,WACE,gCACE,mCACE,yCACA,qBAAKY,IAAKC,EAAWC,IAAI,gBAE3B,iCACC,IAAIC,KAAKC,aAAa,QAAS,CACtBC,MAAO,WACPC,SAAU,QACTC,OAAOf,EAAQI,eAG5B,gCACE,mCACE,0CACA,qBAAKI,IAAKQ,EAAYN,IAAI,iBAE5B,iCACC,IAAIC,KAAKC,aAAa,QAAS,CACtBC,MAAO,WACPC,SAAU,QAETC,QAAQf,EAAQO,gBAG7B,sBAAKU,UAAU,uBAAf,UACE,mCACE,sCACA,qBAAKT,IAAKU,EAAUR,IAAI,aAE1B,iCACC,IAAIC,KAAKC,aAAa,QAAS,CACtBC,MAAO,WACPC,SAAU,QACTC,OAAOf,EAAQM,eC9D3B,I,EAAMV,EAAYC,IAAOC,IAAV,4mBCEf,SAASqB,IAAqB,IAC3BzC,EAAiBgB,IAAjBhB,aAER,OACE,cAAC,EAAD,UACE,kCACE,gCACE,+BACE,2CACA,uCACA,2CACA,2CAIJ,gCACGA,EAAa0C,KAAI,SAAAlC,GAAW,OAC3B,+BACE,6BAAKA,EAAYmC,QACjB,oBAAIJ,UAAW/B,EAAYiB,KAA3B,SACG,IAAIQ,KAAKC,aAAa,QAAS,CAC9BC,MAAO,WACPC,SAAU,QACTC,OAA4B,YAArB7B,EAAYiB,KAAqBjB,EAAYmB,QAAUnB,EAAYmB,UAE/E,6BAAKnB,EAAYoC,WACjB,6BAAK,IAAIX,KAAKY,eAAe,SAASR,OAAO,IAAI/B,KAAKE,EAAYH,gBAT3DG,EAAYsC,cCnB1B,IAAM5B,EAAYC,IAAO4B,KAAV,8FCGf,SAASC,IACd,OACE,eAAC,EAAD,WACE,cAAC3B,EAAD,IACA,cAACoB,EAAD,OCTS,I,IAAA,MAA0B,iCCE5BvB,EAAYC,IAAO8B,OAAV,wDAITC,EAAU/B,IAAOC,IAAV,8bCEb,SAAS+B,EAAT,GAA6D,IAA3CC,EAA0C,EAA1CA,0BACrB,OACI,cAAC,EAAD,UACH,eAACF,EAAD,WACO,qBAAKpB,IAAKuB,EAASrB,IAAI,aACvB,wBAAQP,KAAK,SAAS6B,QAASF,EAA/B,uCCbG,I,QAAA,MAA0B,kC,QCG5BlC,EAAYC,IAAOoC,KAAV,oyBAkDTC,EAA2BrC,IAAOC,IAAV,oHAY/BqC,EAAS,CACbC,MAAO,UACPC,IAAK,WAGMC,EAAWzC,IAAO0C,OAAV,kfAKH,SAACC,GAAD,OAAWA,EAAMC,SAC3BC,YAAe,GAAKP,EAAOK,EAAMG,cACjC,gBAUcC,YAAO,GAAK,YCxE3B,SAASC,EAAT,GAAoF,IAArDC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,eACpCtD,EAAsBC,IAAtBD,kBADgF,EAG9DhB,mBAAS,IAHqD,mBAGjF4C,EAHiF,KAG1E2B,EAH0E,OAI5DvE,mBAAS,GAJmD,mBAIjF4B,EAJiF,KAIzE4C,EAJyE,OAKxDxE,mBAAS,IAL+C,mBAKjF6C,EALiF,KAKvE4B,EALuE,OAMhEzE,mBAAS,WANuD,mBAMjF0B,EANiF,KAM3EgD,EAN2E,iDAQxF,WAA0CC,GAA1C,SAAAvE,EAAA,6DACEuE,EAAMC,iBADR,SAGQ5D,EAAkB,CACtB4B,QACAhB,SACAiB,WACAnB,SAPJ,OAUE6C,EAAS,IACTC,EAAU,GACVC,EAAY,IACZC,EAAQ,WACRJ,IAdF,4CARwF,sBAyBxF,OACA,eAAC,IAAD,CACED,OAAQA,EACRC,eAAgBA,EAChBO,iBAAiB,sBACjBrC,UAAU,sBAJZ,UAME,wBACEd,KAAK,SACL6B,QAASe,EACT9B,UAAU,oBAHZ,SAKE,qBAAKT,IAAK+C,EAAU7C,IAAI,mBAE1B,eAAC,EAAD,CAAW8C,SAvC2E,4CAuCtF,UACE,2DAEA,uBACEC,YAAY,YACZjE,MAAO6B,EACPqC,SAAU,SAAAN,GAAK,OAAIJ,EAASI,EAAMO,OAAOnE,UAE3C,uBACEW,KAAK,SACLsD,YAAY,QACZjE,MAAOa,EACPqD,SAAU,SAAAN,GAAK,OAAIH,EAAUW,OAAOR,EAAMO,OAAOnE,WAGnD,eAAC0C,EAAD,WACE,eAACI,EAAD,CACEnC,KAAK,SACL6B,QAAS,WAAQmB,EAAQ,YACzBV,SAAmB,YAATtC,EACVwC,YAAY,QAJd,UAME,qBAAKnC,IAAKC,EAAWC,IAAI,YACzB,8CAEF,eAAC4B,EAAD,CACEnC,KAAK,SACL6B,QAAS,WAAQmB,EAAQ,aACzBV,SAAmB,aAATtC,EACVwC,YAAY,MAJd,UAME,qBAAKnC,IAAKQ,EAAYN,IAAI,aAC1B,kDAIJ,uBACE+C,YAAY,YACZjE,MAAO8B,EACPoC,SAAU,SAAAN,GAAK,OAAIF,EAAYE,EAAMO,OAAOnE,UAG9C,wBAAQW,KAAK,SAAb,6BC7FC,IAAM0D,EAAcC,YAAH,wsDCQjB,SAASC,KAAO,IAAD,EACgDtF,oBAAS,GADzD,mBACXuF,EADW,KACgBC,EADhB,KAYpB,OACE,eAAC1F,EAAD,WACE,cAACsD,EAAD,CAAQC,0BAVZ,WACCmC,GAA6B,MAW1B,cAACvC,EAAD,IAEA,cAACmB,EAAD,CACEC,OAAQkB,EACRjB,eAZN,WACCkB,GAA6B,MAc1B,cAACJ,EAAD,OAzBNK,IAAMC,cAAc,SCJpBC,YAAa,CACXC,OAAQ,CACNnF,YAAaoF,KAGfC,MALW,SAKLC,GACJA,EAAOC,GAAGC,SAAS,CACjBhG,aAAc,CACZ,CACE8C,GAAI,EACJH,MAAO,aACPlB,KAAM,UACNmB,SAAU,WACVjB,OAAQ,IACRtB,UAAW,IAAIC,KAAK,wBAEtB,CACEwC,GAAI,EACJH,MAAO,UACPlB,KAAM,WACNmB,SAAU,OACVjB,OAAQ,KACRtB,UAAW,IAAIC,KAAK,4BAM5B2F,OA5BW,WA4BD,IAAD,OACPC,KAAKC,UAAY,MAEjBD,KAAKvF,IAAI,iBAAiB,WACxB,OAAO,EAAKyF,OAAOC,IAAI,kBAGzBH,KAAK9F,KAAK,iBAAiB,SAACgG,EAAQE,GAClC,IAAM7F,EAAO8F,KAAKC,MAAMF,EAAQG,aAEhC,OAAOL,EAAO3G,OAAO,cAAegB,SAK1CiG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvB,GAAD,MAEFwB,SAASC,eAAe,W","file":"static/js/main.a637cf7d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const api = axios.create({\n  baseURL: 'https://gabriel-santana.github.io/dtmoney/api',\n})","import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../services/api\";\n\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>\n\ninterface TrasactionsProviderProps {\n  children: ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n  );\n\nexport function TransactionsProvider({ children }: TrasactionsProviderProps) {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() => {\n      api.get('transactions')\n      .then(response => setTransactions(response.data.transactions))\n    }, []);\n\n    async function createTransaction(transactionInput: TransactionInput) {\n      const response = await api.post('/transactions', {...transactionInput, createdAt: new Date()});\n      const { transaction } =  response.data;\n\n      setTransactions([...transactions, transaction]);\n    }\n\n    return (\n      <TransactionsContext.Provider value={{transactions, createTransaction}} >\n        {children}\n      </TransactionsContext.Provider>\n    );\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext);\n\n  return context;\n}","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\";\n\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--text-title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.highlight-background {\n      background: var(--green);\n      color: #FFF;\n    }\n  }\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\n\nimport incomeImg from '../../assets/income.svg'\nimport outcomeImg from '../../assets/outcome.svg'\nimport totalImg from '../../assets/total.svg'\n\nimport { Container } from \"./styles\";\n\n\nexport function Summary() {\n  const { transactions } = useTransactions();\n  \n  const summary = transactions.reduce((acc, transaction) => {\n    if(transaction.type === 'deposit'){\n      acc.deposits += transaction.amount;\n      acc.total += transaction.amount;\n    }else{\n      acc.withdraws += transaction.amount;\n      acc.total -= transaction.amount;\n    }\n\n    return acc;\n  }, {\n    deposits: 0,\n    withdraws: 0,\n    total: 0,\n  });\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={incomeImg} alt=\"Entradas\" />\n        </header>\n        <strong>\n        {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                }).format(summary.deposits)}\n        </strong>\n      </div>\n      <div>\n        <header>\n          <p>Sa√≠das</p>\n          <img src={outcomeImg} alt=\"Sa√≠das\" />\n        </header>\n        <strong>\n        {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL',\n                  \n                }).format(-summary.withdraws)}\n        </strong>\n      </div>\n      <div className=\"highlight-background\">\n        <header>\n          <p>Total</p>\n          <img src={totalImg} alt=\"Total\" />\n        </header>\n        <strong>\n        {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                }).format(summary.total)}\n        </strong>\n      </div>\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      color: var(--text-body);\n      border-radius: 0.25rem;\n\n      &:first-child {\n        color: var(--text-title);\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n  }\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\n\nimport { Container } from \"./styles\";\n\nexport function TransactionsTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>T√≠tulo</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map(transaction => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat('pt-BR', {\n                  style: 'currency',\n                  currency: 'BRL'\n                }).format(transaction.type === 'deposit' ? transaction.amount : -transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>{new Intl.DateTimeFormat('pt-BR').format(new Date(transaction.createdAt))}</td>\n            </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`;","import { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionTable\";\n\nimport { Container } from \"./styles\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  );\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from \"styled-components\";\n\nexport const Container = styled.header`\n  background: var(--blue);\n`;\n\nexport const Content = styled.div`\n  max-width: 1128px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    color: #FFF;\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: 0.25rem;\n    height: 3rem;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;","import logoImg from '../../assets/logo.svg'\n\nimport { Container, Content } from './styles'\n\ninterface HeaderProps {\n\tonOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n    return (\n        <Container>\n\t\t\t\t\t<Content>\n            <img src={logoImg} alt=\"dt money\" />\n            <button type=\"button\" onClick={onOpenNewTransactionModal}>\n                Nova transa√ß√£o\n            </button>\n\t\t\t\t\t</Content>\n        </Container>\n        \n    )\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from \"styled-components\";\nimport { darken, transparentize } from \"polished\";\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid #d7d7d7;\n    background: #e7e9ee;\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type='submit'] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #FFF;\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n\n  \n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`;\n\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: 'green' | 'red';\n}\n\nconst colors = {\n  green: '#33CC95',\n  red: '#E52E4D'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n    height: 4rem;\n    border: 1px solid #d7d7d7;\n    border-radius: 0.25rem;\n\n    background: ${(props) => props.isActive  \n      ? transparentize(0.8, colors[props.activeColor])\n      : 'transparent'\n    };\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: border-color 0.2s;\n     \n    &:hover {\n      border-color: ${darken(0.1, '#d7d7d7')};\n    }\n\n    img {\n      width: 28px;\n      height: 20px;\n    }\n\n    span {\n      display: inline-block;\n      margin-left: 1rem;\n      font-size: 1rem;\n      color: var(--text-title);\n    }\n`;\n","import { FormEvent, useState } from 'react';\nimport Modal from 'react-modal';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\n\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\n  const { createTransaction } = useTransactions();\n\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n  const [type, setType] = useState('deposit');\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n\n    await createTransaction({\n      title,\n      amount,\n      category,\n      type\n    })\n\n    setTitle('');\n    setAmount(0);\n    setCategory('');\n    setType('deposit');\n    onRequestClose();\n  }\n\n  return(\n  <Modal \n    isOpen={isOpen}\n    onRequestClose={onRequestClose}\n    overlayClassName=\"react-modal-overlay\"\n    className=\"react-modal-content\"\n  >\n    <button \n      type=\"button\" \n      onClick={onRequestClose} \n      className=\"react-modal-close\"\n    >\n      <img src={closeImg} alt=\"Fechar Modal\" />\n    </button>\n    <Container onSubmit={handleCreateNewTransaction}>\n      <h2>Cadastrar transa√ß√£o</h2>\n\n      <input \n        placeholder=\"T√≠tulo\" \n        value={title}\n        onChange={event => setTitle(event.target.value)}\n      />\n      <input \n        type=\"number\"\n        placeholder=\"Valor\" \n        value={amount}\n        onChange={event => setAmount(Number(event.target.value))}\n      />\n\n      <TransactionTypeContainer>\n        <RadioBox\n          type=\"button\"\n          onClick={() => { setType('deposit'); }}\n          isActive={type === 'deposit'}\n          activeColor=\"green\"\n        >\n          <img src={incomeImg} alt=\"Entrada\" />\n          <span>Entrada</span>\n        </RadioBox>\n        <RadioBox\n          type=\"button\"\n          onClick={() => { setType('withdraw'); }}\n          isActive={type === 'withdraw'}\n          activeColor=\"red\"\n        >\n          <img src={outcomeImg} alt=\"Sa√≠da\" />\n          <span>Sa√≠da</span>\n        </RadioBox>\n      </TransactionTypeContainer>\n\n      <input \n        placeholder=\"Categoria\" \n        value={category}\n        onChange={event => setCategory(event.target.value)}\n      />\n\n      <button type=\"submit\">\n        Cadastrar\n      </button>\n    </Container>\n  </Modal>\n  );\n}","import { createGlobalStyle } from \"styled-components\";\n\n\nexport const GlobalStyle = createGlobalStyle`\n    :root {\n        --backgroung: #f8f2f5;\n        --red: #E52E4D;\n        --green: #33cc95;\n        --blue: #5429CC;\n\n        --blue-light: #6933ff;\n\n        --text-title: #363f5f;\n        --text-body: #969cb3;\n\n        --background: #f0f2f5;\n        --shape: #FFFFFF;\n    }\n    \n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    html { \n        @media (min-width: 1080px) {\n            font-size: 93.75%;\n        }\n\n        @media (min-width: 720px) {\n            font-size: 87.5%;\n        }\n    }\n\n    body {\n        background: var(--backgroung);\n        -webkit-font-smoothing: antialiased;\n    }\n\n    body, input, textarea, button {\n        font-family: 'Poppins', sans-serif;\n        font-weight: 400;\n    }\n\n    h1, h2, h3, h4, h5, h6, strong {\n        font-weight: 600;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    [disabled] {\n        opacity: 0.6;\n        cursor: not-allowed;\n    }\n\n    .react-modal-overlay {\n\t\t\tbackground: rgba(0, 0, 0, 0.5);\n\n\t\t\tposition: fixed;\n\t\t\ttop: 0;\n\t\t\tbottom: 0;\n\t\t\tright: 0;\n\t\t\tleft: 0;\n\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n    }\n\n    .react-modal-content {\n\t\t\twidth: 100%;\n\t\t\tmax-width: 576px;\n\t\t\tbackground: var(--background);\n\t\t\tpadding: 3rem;\n\t\t\tposition: relative;\n\t\t\tborder-radius: 0.25rem;\n    }\n\n    .react-modal-close {\n\t\t\tposition: absolute;\n\t\t\tright: 1.5rem;\n\t\t\ttop: 1.5rem;\n\t\t\tborder: 0;\n\t\t\tbackground: transparent;\n\n\t\t\t\n\t\t\ttransition: filter 0.2s;\n\n\t\t\t&:hover {\n\t\t\t\tfilter: brightness(0.8);\n\t\t\t}\n    }\n`;","import { useState } from 'react';\nimport Modal from 'react-modal'\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nimport { GlobalStyle } from \"./styles/global\";\n\nModal.setAppElement('#root');\n\nexport function App() {\n    const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n    \n\n\t\tfunction handleOpenNewTransactionModal() {\n\t\t\tsetIsNewTransactionModalOpen(true);\n\t\t}\n\n\t\tfunction handleCloseNewTransactionModal() {\n\t\t\tsetIsNewTransactionModalOpen(false);\n\t\t}\n    \n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal}/>\n\n      <Dashboard />\n      \n      <NewTransactionModal \n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle /> \n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n  \n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Sal√°rio',\n          type: 'deposit',\n          category: 'Trabalho',\n          amount: 10000,\n          createdAt: new Date('2021-07-07 09:00:00')\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          type: 'withdraw',\n          category: 'Casa',\n          amount: 1100,\n          createdAt: new Date('2021-07-14 11:00:00')\n        }\n      ],\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody)\n\n      return schema.create('transaction', data)\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}